<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>協同產品設計實習</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-05-03T05:57:11+08:00</updated><entry><title>2024 Spring 課程4</title><link href="./2024-Spring-w10-blog-tutorial.html" rel="alternate"></link><published>2024-04-26T15:12:00+08:00</published><updated>2024-05-03T05:54:09+08:00</updated><author><name>40923154</name></author><id>tag:None,2024-04-26:./2024-Spring-w10-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統10&lt;/h1&gt;
&lt;p&gt;解決從個人倉儲推送資料更新到群組倉儲錯誤的問題
問題:在推送更新前沒有事先git pull，並且頭尾分頁沒有處理乾淨
解決方案:./acp"xxx"&lt;/p&gt;</content><category term="w10"></category><category term="Replit 帳號維護分組倉儲"></category></entry><entry><title>2024 Spring 課程4</title><link href="./2024-Spring-w9-blog-tutorial.html" rel="alternate"></link><published>2024-04-19T15:12:00+08:00</published><updated>2024-05-03T05:57:11+08:00</updated><author><name>40923154</name></author><id>tag:None,2024-04-19:./2024-Spring-w9-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統9&lt;/h1&gt;
&lt;p&gt;練習與網路AI溝通並完成英文翻譯中文論文
更新:精簡摘要內容為下
第 6 章：Odoo 在 PLM 和 MES 方面的成就
本章將總結 Odoo 軟件在 PLM 和 MES 方面的優缺點，重點關注 4.2 節提出的問題，並討論在模擬過程中觀察到的 Odoo 功能及其局限性。
6.1 Odoo 如何處理項目？
總體而言，Odoo 軟件為使用者提供了各種各樣的數字項目，可以用来表示制造以及其他業務方面的各個方面。這主要是因为 Odoo 的 ERP 功能使用項目來跟蹤其使用過程中的拉動和推送操作，這也是軟件實現自動化的方式。
6.1.1 產品生命週期的所有方面都得到體現了嗎？
源于 ERP 系統的缺點之一是它關注 ERP 的主要範圍（圖 2），即生產和銷售。Odoo 中的項目反映了這一點。例如，在模擬過程中，盡管可以對生命週期的開發部分進行表示，但这感覺更像是對生產階段功能的延伸，而不是對開發本身的支持（圖 70）。例如，在開發原型時，許多步驟（例如創建 ECO 只是為了在開始時攜帶文件，以及每次對原型進行調整時都要經歷許多步驟）都顯得過於官僚或過於繁瑣。
6.1.2 每個項目的表現如何？
項目的表示級別取決於項目的使用方式。一個很好的例子是產品項目對材料的關注。從某種意義上說，所有東西都被視為產品，原型或原材料之間幾乎沒有區別。
產品項目或 BOM 項目的表示非常高級，包含大量元數據和與其他項目 的有用連接。然而，即使在制造應用程序中，也有一些項目缺乏關注。例如，操作項目可以從更多的上傳功能中獲益匪淺，例如 3D 打印或 CNC 文件。隨著自動化在生產中變得越來越普遍，僅僅擁有 PDF 或幻燈片說明已經不夠了。此外，其他項目即使使用 ECO 也無法保存文件。
6.2 創建全新產品有多容易？
產品創建是 Odoo 中最直接的流程之一，它實際上歸結為使用庫存應用程序或制造應用程序來創建新產品，然後填寫其元數據。
6.2.1 產品是如何描述的？
產品的描述清晰簡潔，產品項目允許將圖像上傳到項目並用作圖標。Odoo 中產品項目的 ERP 性質意味著元數據相當偏向於用於管理存儲和庫存的信息（重量、體積、數量等），但該項目也允許書面描述，以及提供指向與產品相關的 BOM 和 ECO 的鏈接。
6.2.2 產品如何集成和引用相關文件？
Odoo 確實有在嘗試讓最有價值的項目（產品和 BOM）能夠管理和引用相關文件。然而，Odoo 在文件管理方面並沒有實現太多功能。它最多只能允許手動上傳和下載文件。這意味着，每當有人對文件進行更改時，都需要手動將其上傳到 ECO 中。除了操作項目之外，與大多數文件的集成是不存在的，因為指令文件可以在生產過程中在 Odoo 中打開和交互。
6.2.3 更改其中一個會影響另一個嗎？
不會，Odoo 主要將文件視為供以後參考的文書工作。任何可能導致產品或 BOM 元數據發生變化的文件添加都需要有人意識到這種變化並手動更新信息。
6.3 創建全新生產流程有多容易？
如前所述，最能代表流程的項目是物料清單。此項目類需要與現有產品關聯，除此之外，BOM 的創建並不比產品項目難。
6.3.1 流程是如何描述的？
流程在 BOM 中描述為組件（其他產品項目）和操作的列表，這些組件和操作按照特定順序執行，以生產一定數量的最終產品。這種表示似乎與生產流程很吻合。元數據保持在最低限度，但仍然能夠提供文本描述。
6.3.2 流程如何與它生產的產品集成和引用？
BOM 和產品項目之間的集成是 Odoo 中做得最好的部分。BOM 中的更改會影響生產，并直接鏈接到產品。只要可以更改元數據，并且该方面也在產品項目中表示，則其中一個的更改將由另一個繼承。
6.3.3 更改其中一個會影響另一個嗎？
就庫存和制造而言，集成和引用都得到了很好的實現。生產無縫地導致庫存發生變化，并且 GUI 的導航路徑也得到了很好的優化。從一個產品到另一個產品或導航到其他相關項目只需點擊 3 或 4 次。
6.4 改進现有產品/生產流程有多容易？
如前所述，Odoo 中的所有改進都是使用工程變更單執行的。這些應用於產品項目或物料清單。創建 ECO 非常簡單且有條理，ECO 本身就是一個項目，象徵着創建更改的信號，一旦生效，它就象徵着產品或流程的增量。
6.4.1 更新其元數據有多容易？
更新 Odoo 中任何項目的任何元數據都很容易；然而，明智的做法是指出，由于 ECO 是獨立的項目，只是由產品或 BOM 指向，因此許多更改不是自動的，需要人工干預。即 ECO 不會更改產品的文本描述。如果新更新需要更改該描述，則需要用戶在產品項目中進行手動干預。这样做很容易，但這是一項額外的任務，ECO 不會對其進行跟踪。
6.4.2 确定更改的影響有多容易？
Odoo 的信息反饋主要以制造訂單為基礎。可用的信息很清晰，并且 ECO 不會影響已經進行中的 MO，因此應用 ECO 的影響不難注意到。然而，需要注意的是，在顯示性能信息的方式中，沒有指示產品版本或應用的 ECO。這意味着用戶需要首先确定 ECO 是何時應用的，然后導航到數據中的等效 MO 來得出結論。盡管這對最近的更改不是問題，但如果有人想要分析舊更改的影響，這就會成為問題。
6.4.3 該軟件如何處理不同的產品版本？
版本控制很好地涵蓋了產品/BOM 與鏈接的 ECO 之間的 1 對 N 關係。每個產品都有一個標籤，其中包含按時間順序應用于它的所有 ECO，有效地充當代表項目演變的時間線。
6.5 查找與產品或流程相關的數據有多容易？
如前一章所述，與生產相關的 most 性能數據都集中在“報告”選項卡下（圖 71）。
這意味着就性能而言，很容易找到數據。前一章將展示在這些選項卡中可用的可能信息的示例。
除了使用此路徑外，產品項目的 UI 還有一個選項卡，指向與產品相關的每月生產量比較（圖 72）。如果 Odoo 的試用版中有多個時間段，這將更令人印象深刻。
6.5.1 查找生產數量有多容易？
除了前面提到的方法之外，Odoo 還提供了一個單位預測圖，該圖記錄了庫存的進出情況。這對於估計銷售額和平衡存儲與需求特别有用（圖 73）。這項功能在本工作中沒有過多提及，因為供求關係与其說是 MES 功能，不如說是一個概述生產的有用工具。
6.5.2 Odoo 如何生成性能數據？
敏銳的讀者會注意到，到目前為止提到的所有數據都來自已執行操作的完成時間、與 MO 相關的數量以及使用的工作中心。盡管如此，考虑到所有這些都是自動生成的，因此可以得出多少信息仍然令人印象深刻。
6.5.3 作為升級的結果，軟件如何呈現性能變化？
为了識别變化，用户必須識别 MO 之後的更改，并查看基于此的差異。理想情况下，如果圖形信息顯示產品的版本，那就太好了，但 Odoo V13 中沒有提供。&lt;/p&gt;</content><category term="w9"></category><category term="Google AI"></category></entry><entry><title>2024 Spring 課程4</title><link href="./2024-Spring-w6-blog-tutorial.html" rel="alternate"></link><published>2024-03-29T15:12:00+08:00</published><updated>2024-04-12T06:11:19+08:00</updated><author><name>40923154</name></author><id>tag:None,2024-03-29:./2024-Spring-w6-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統6&lt;/h1&gt;
&lt;p&gt;心得:學習將個人倉儲的東西更新到群組倉儲。&lt;/p&gt;</content><category term="w6"></category><category term="將個人倉儲納入分組倉儲子目錄"></category></entry><entry><title>2024 Spring 課程4</title><link href="./2024-Spring-w5-blog-tutorial.html" rel="alternate"></link><published>2024-03-22T15:00:00+08:00</published><updated>2024-04-12T06:08:58+08:00</updated><author><name>40923154</name></author><id>tag:None,2024-03-22:./2024-Spring-w5-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統5&lt;/h1&gt;
&lt;p&gt;心得:嘗試加入群組倉儲的子目錄 遇到問題是在近端會遇上無法推送問題。&lt;/p&gt;</content><category term="w5"></category><category term="將個人倉儲納入分組倉儲子目錄"></category></entry><entry><title>2024 Spring 課程3</title><link href="./2024-Spring-w4-blog-tutorial.html" rel="alternate"></link><published>2024-03-15T15:00:00+08:00</published><updated>2024-03-22T08:55:42+08:00</updated><author><name>40923154</name></author><id>tag:None,2024-03-15:./2024-Spring-w4-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統4&lt;/h1&gt;
&lt;p&gt;心得:學習使用CUTCAP剪輯影片，加入字幕。並上傳到小組群組&lt;/p&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w4"></category><category term="影片剪輯，上字幕 重新review進度"></category></entry><entry><title>2024 Spring 課程2</title><link href="./2024-Spring-w3-blog-tutorial.html" rel="alternate"></link><published>2024-03-08T15:00:00+08:00</published><updated>2024-03-22T09:04:26+08:00</updated><author><name>40923154</name></author><id>tag:None,2024-03-08:./2024-Spring-w3-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統2&lt;/h1&gt;
&lt;p&gt;github 倉儲群組設立 和尋找組員&lt;/p&gt;</content><category term="w3"></category><category term="將個人倉儲納入分組倉儲下的子目錄 vmp65l3"></category></entry><entry><title>2024 Spring 課程1</title><link href="./2024-Spring-w2-blog-tutorial.html" rel="alternate"></link><published>2024-03-01T15:00:00+08:00</published><updated>2024-04-12T06:28:11+08:00</updated><author><name>40923154</name></author><id>tag:None,2024-03-01:./2024-Spring-w2-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統2&lt;/h1&gt;
&lt;p&gt;心得:更熟悉網誌推送操作 嘗試編寫網誌&lt;/p&gt;</content><category term="w2"></category><category term="網誌擴增"></category><category term="Pelican"></category></entry><entry><title>2024 Spring 課程1</title><link href="./2024-Spring-w1-blog-tutorial.html" rel="alternate"></link><published>2024-02-23T15:00:00+08:00</published><updated>2024-04-12T06:30:03+08:00</updated><author><name>40923154</name></author><id>tag:None,2024-02-23:./2024-Spring-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統2&lt;/h1&gt;
&lt;p&gt;心得:blog setup&lt;/p&gt;</content><category term="w1"></category><category term="網誌擴增"></category><category term="Pelican"></category></entry></feed>